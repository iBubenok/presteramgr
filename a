b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   1) #ifdef HAVE_CONFIG_H
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   2) #include <config.h>
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   3) #endif /* HAVE_CONFIG_H */
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   4) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   5) #include <cpssdefs.h>
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   6) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   7) #include <czmq.h>
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   8) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600   9) #include <arpd.h>
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  10) #include <arpc.h>
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  11) #include <ret.h>
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  12) #include <control-proto.h>
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500  13) #include <stack.h>
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500  14) #include <mac.h>
0a418845 (Oleg Belozeorov    2013-03-13 09:33:20 +0600  15) #include <debug.h>
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500  16) #include <utils.h>
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  17) 
60a46819 (Ildar Kindibulatov 2015-09-11 21:47:04 +0500  18) #include <sys/types.h>
60a46819 (Ildar Kindibulatov 2015-09-11 21:47:04 +0500  19) #include <fcntl.h>
60a46819 (Ildar Kindibulatov 2015-09-11 21:47:04 +0500  20) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  21) static void *arpd_sock;
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  22) 
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  23) static int arpc_sock_ready = 0;
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  24) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  25) void
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  26) arpc_start (void)
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  27) {
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  28)   arpc_sock_ready = 0;
60a46819 (Ildar Kindibulatov 2015-09-11 21:47:04 +0500  29)   int fd = open("/var/tmp/sock.presteramgr",
60a46819 (Ildar Kindibulatov 2015-09-11 21:47:04 +0500  30)              O_WRONLY | O_CREAT | O_TRUNC, S_IROTH | S_IRGRP | S_IWGRP | S_IRUSR | S_IWUSR);
60a46819 (Ildar Kindibulatov 2015-09-11 21:47:04 +0500  31)   close(fd);
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  32) }
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  33) 
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  34) void
6b7178bd (Ildar Kindibulatov 2015-11-06 20:08:20 +0500  35) arpc_connect (void) {
6b7178bd (Ildar Kindibulatov 2015-11-06 20:08:20 +0500  36) 
00000000 (Not Committed Yet  2021-11-03 15:46:35 +0500  37)   DEBUG("sbelo arpc_connect\n");
517f3e6a (Mikhail Khotko     2017-04-30 12:09:42 +0500  38)   arpd_sock = zsock_new (ZMQ_PUSH);
517f3e6a (Mikhail Khotko     2017-04-30 12:09:42 +0500  39)   zsock_connect (arpd_sock, ARPD_COMMAND_EP);
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  40)   arpc_sock_ready = 1;
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  41) }
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  42) 
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  43) void
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  44) arpc_send_set_mac_addr (const mac_addr_t addr) {
00000000 (Not Committed Yet  2021-11-03 15:46:35 +0500  45)   DEBUG("sbelo arpc_send_set_mac_addr\n");
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  46) 
6b7178bd (Ildar Kindibulatov 2015-11-06 20:08:20 +0500  47)   if (!arpc_sock_ready)
6b7178bd (Ildar Kindibulatov 2015-11-06 20:08:20 +0500  48)     return;
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  49)   zmsg_t *msg = zmsg_new ();
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  50) 
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  51)   arpd_command_t cmd = ARPD_CC_SET_MAC_ADDR;
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  52)   zmsg_addmem (msg, &cmd, sizeof (cmd));
de315606 (Ildar Kindibulatov 2015-08-28 19:40:23 +0500  53)   zmsg_addmem (msg, addr, sizeof (mac_addr_t));
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  54) 
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  55)   zmsg_send (&msg, arpd_sock);
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  56) }
1160a0d6 (Ildar Kindibulatov 2015-08-15 16:41:50 +0500  57) 
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500  58) void
6b7178bd (Ildar Kindibulatov 2015-11-06 20:08:20 +0500  59) arpc_ip_addr_op (const struct gw *gw, arpd_command_t cmd) {
00000000 (Not Committed Yet  2021-11-03 15:46:35 +0500  60)   DEBUG("sbelo arpc_ip_addr_op\n");
6b7178bd (Ildar Kindibulatov 2015-11-06 20:08:20 +0500  61) 
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  62)   if (!arpc_sock_ready)
ff3f6ad9 (Ildar Kindibulatov 2015-10-19 17:46:43 +0500  63)     return;
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500  64)   if (stack_id != master_id) {
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500  65)     mac_op_opna(gw, cmd);
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500  66)     return;
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500  67)   }
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  68)   zmsg_t *msg = zmsg_new ();
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  69) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  70)   zmsg_addmem (msg, &cmd, sizeof (cmd));
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  71)   arpd_vid_t vid = gw->vid;
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  72)   zmsg_addmem (msg, &vid, sizeof (vid));
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  73)   arpd_ip_addr_t ip = gw->addr.u32Ip;
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  74)   zmsg_addmem (msg, &ip, sizeof (ip));
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  75) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  76)   zmsg_send (&msg, arpd_sock);
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  77) }
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  78) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  79) void
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  80) arpc_request_addr (const struct gw *gw)
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  81) {
00000000 (Not Committed Yet  2021-11-03 15:46:35 +0500  82)   DEBUG("sbelo arpc_request_addr\n");
00000000 (Not Committed Yet  2021-11-03 15:46:35 +0500  83) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  84)   arpc_ip_addr_op (gw, ARPD_CC_IP_ADDR_ADD);
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  85) }
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  86) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  87) void
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  88) arpc_release_addr (const struct gw *gw)
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  89) {
00000000 (Not Committed Yet  2021-11-03 15:46:35 +0500  90)   DEBUG("sbelo arpc_release_addr\n");
00000000 (Not Committed Yet  2021-11-03 15:46:35 +0500  91) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  92)   arpc_ip_addr_op (gw, ARPD_CC_IP_ADDR_DEL);
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  93) }
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  94) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  95) void
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  96) arpc_set_mac_addr (arpd_ip_addr_t ip,
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  97)                    arpd_vid_t vid,
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600  98)                    const uint8_t *mac,
dd1165fb (Ildar Kindibulatov 2016-06-06 20:24:57 +0500  99)                    arpd_vif_id_t vif)
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 100) {
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500 101) DEBUG(">>>>arpc_set_mac_addr (%x, %d, " MAC_FMT ", %x)\n",
8d99a32a (Ildar Kindibulatov 2016-06-09 17:59:39 +0500 102)     ip, vid, MAC_ARG(mac), vif);
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 103)   GT_IPADDR ip_addr;
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 104)   GT_ETHERADDR mac_addr;
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 105)   struct gw gw;
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 106) 
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 107)   ip_addr.u32Ip = ip;
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 108)   route_fill_gw (&gw, &ip_addr, vid);
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 109)   memcpy (mac_addr.arEther, mac, 6);
dd1165fb (Ildar Kindibulatov 2016-06-06 20:24:57 +0500 110)   ret_set_mac_addr (&gw, &mac_addr, vif);
b9445883 (Oleg Belozeorov    2013-03-12 15:28:03 +0600 111) }
