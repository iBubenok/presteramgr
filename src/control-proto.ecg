header __CONTROL_PROTO_HEADER__;

verbatim C %%%
#include <zmq.h>
#include <czmq.h>
#include <stdint.h>
%%%

const PUB_SOCK_EP = "ipc:///tmp/presteramgr.notify";
const CMD_SOCK_EP = "ipc:///tmp/presteramgr.command";

typedef uint16_t port_num_t;
typedef uint16_t notification_t;
typedef uint16_t command_t;
typedef uint16_t status_t;
typedef uint16_t stp_id_t;
typedef uint8_t  stp_state_t;
typedef uint16_t vid_t;

enum control_notification {
  CN_PORT_LINK_STATE,
  CN_BPDU,
  CN_MAX
};

verbatim C %%%
static inline int
control_notification_subscribe (void *sock, enum control_notification cn)
{
  notification_t tmp = cn;
  return zmq_setsockopt (sock, ZMQ_SUBSCRIBE, &tmp, sizeof (tmp));
}

static inline int
control_notification_unsubscribe (void *sock, enum control_notification cn)
{
  notification_t tmp = cn;
  return zmq_setsockopt (sock, ZMQ_UNSUBSCRIBE, &tmp, sizeof (tmp));
}

static inline int
control_notification_connect (void *sock)
{
  return zsocket_connect (sock, PUB_SOCK_EP);
}
%%%

enum port_speed {
  PORT_SPEED_10,
  PORT_SPEED_100,
  PORT_SPEED_1000,
  PORT_SPEED_10000,
  PORT_SPEED_12000,
  PORT_SPEED_2500,
  PORT_SPEED_5000,
  PORT_SPEED_13600,
  PORT_SPEED_20000,
  PORT_SPEED_40000,
  PORT_SPEED_16000,
  PORT_SPEED_NA
};

struct port_link_state {
  uint8_t link;
  uint8_t speed;
  uint8_t duplex;
};

enum control_command {
  CC_SET_FDB_MAP,
  CC_PORT_SEND_BPDU,
  CC_PORT_SHUTDOWN,
  CC_PORT_GET_STATE,
  CC_PORT_FDB_FLUSH,
  CC_PORT_SET_STP_STATE,
  CC_VLAN_DUMP,
  CC_MAX
};

enum port_stp_state {
  STP_STATE_DISABLED,
  STP_STATE_DISCARDING,
  STP_STATE_LEARNING,
  STP_STATE_FORWARDING,
  STP_STATE_MAX
};

enum status {
  ST_OK,
  ST_BAD_FORMAT,
  ST_BAD_REQUEST,
  ST_BAD_VALUE,
  ST_HW_ERROR,
  ST_NOT_SUPPORTED,
  ST_NOT_IMPLEMENTED,
  ST_DOES_NOT_EXIST,
  ST_HEX
};
