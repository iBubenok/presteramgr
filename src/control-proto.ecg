header __CONTROL_PROTO_HEADER__;

verbatim C %%%
#include <zmq.h>
#include <czmq.h>
#include <stdint.h>
%%%

const PUB_SOCK_EP = "ipc:///tmp/presteramgr.notify";
const CMD_SOCK_EP = "ipc:///tmp/presteramgr.command";

typedef uint16_t port_id_t;
typedef uint16_t notification_t;
typedef uint16_t command_t;
typedef uint16_t status_t;
typedef uint16_t stp_id_t;
typedef uint8_t  stp_state_t;
typedef uint16_t vid_t;
typedef uint8_t mac_addr_t[6];
typedef uint8_t port_mode_t;
typedef uint8_t bool_t;
typedef uint32_t aging_time_t;
typedef uint8_t port_speed_t;
typedef uint8_t port_duplex_t;
typedef uint64_t bps_t;

enum control_notification {
  CN_PORT_LINK_STATE,
  CN_BPDU,
  CN_MAX
};

verbatim C %%%
static inline int
control_notification_subscribe (void *sock, enum control_notification cn)
{
  notification_t tmp = cn;
  return zmq_setsockopt (sock, ZMQ_SUBSCRIBE, &tmp, sizeof (tmp));
}

static inline int
control_notification_unsubscribe (void *sock, enum control_notification cn)
{
  notification_t tmp = cn;
  return zmq_setsockopt (sock, ZMQ_UNSUBSCRIBE, &tmp, sizeof (tmp));
}

static inline int
control_notification_connect (void *sock)
{
  return zsocket_connect (sock, PUB_SOCK_EP);
}
%%%

enum port_speed {
  PORT_SPEED_AUTO,
  PORT_SPEED_10,
  PORT_SPEED_100,
  PORT_SPEED_1000,
  PORT_SPEED_10000,
  PORT_SPEED_12000,
  PORT_SPEED_2500,
  PORT_SPEED_5000,
  PORT_SPEED_13600,
  PORT_SPEED_20000,
  PORT_SPEED_40000,
  PORT_SPEED_16000,
  PORT_SPEED_NA
};

enum port_mode {
  PM_ACCESS,
  PM_TRUNK
};

struct port_link_state {
  uint8_t link;
  uint8_t speed;
  uint8_t duplex;
};

struct mac_op_arg {
  vid_t vid;
  port_id_t port;
  uint8_t drop;
  uint8_t delete;
  mac_addr_t mac;
};

struct mac_entry {
  mac_addr_t mac;
  bool_t dynamic;
};

struct mac_age_arg {
  vid_t vid;
  port_id_t port;
};
const ALL_VLANS = 0;
const ALL_PORTS = 0;
const CPU_PORT = 0xFFFF;

enum traffic_type {
  TT_UNICAST,
  TT_MULTICAST,
  TT_BROADCAST,
  __TT_MAX
};

typedef uint8_t traffic_type_t;

enum flow_control {
  FC_DESIRED,
  FC_ON,
  FC_OFF,
  __FC_MAX
};

typedef uint8_t flow_control_t;

struct port_block {
  traffic_type_t type;
  bool_t block;
};

struct rate_limit {
  traffic_type_t type;
  bps_t limit;
};

enum control_command {
  CC_SET_FDB_MAP,
  CC_PORT_SEND_BPDU,
  CC_PORT_SHUTDOWN,
  CC_PORT_BLOCK,
  CC_PORT_GET_STATE,
  CC_PORT_FDB_FLUSH,
  CC_PORT_SET_STP_STATE,
  CC_PORT_SET_MODE,
  CC_PORT_SET_ACCESS_VLAN,
  CC_PORT_SET_NATIVE_VLAN,
  CC_PORT_SET_SPEED,
  CC_PORT_SET_DUPLEX,
  CC_PORT_SET_MDIX_AUTO,
  CC_PORT_SET_FLOW_CONTROL,
  CC_PORT_GET_STATS,
  CC_PORT_SET_RATE_LIMIT,
  CC_PORT_SET_BANDWIDTH_LIMIT,
  CC_PORT_SET_PROTECTED,
  CC_PORT_DUMP_PHY_REG,
  CC_VLAN_ADD,
  CC_VLAN_DELETE,
  CC_VLAN_SET_DOT1Q_TAG_NATIVE,
  CC_VLAN_DUMP,
  CC_MAC_OP,
  CC_MAC_SET_AGING_TIME,
  CC_MAC_LIST,
  CC_MAC_FLUSH_DYNAMIC,
  CC_QOS_SET_MLS_QOS_TRUST,
  CC_QOS_SET_PORT_MLS_QOS_TRUST_COS,
  CC_QOS_SET_PORT_MLS_QOS_TRUST_DSCP,
  CC_QOS_SET_DSCP_PRIO,
  CC_MAX
};

enum port_stp_state {
  STP_STATE_DISABLED,
  STP_STATE_DISCARDING,
  STP_STATE_LEARNING,
  STP_STATE_FORWARDING,
  STP_STATE_MAX
};

struct port_speed_arg {
  port_speed_t speed;
  bool_t speed_auto;
};

enum port_duplex {
  PORT_DUPLEX_AUTO,
  PORT_DUPLEX_HALF,
  PORT_DUPLEX_FULL,
  __PORT_DUPLEX_MAX
};

enum status {
  ST_OK,
  ST_BAD_FORMAT,
  ST_BAD_REQUEST,
  ST_BAD_VALUE,
  ST_HW_ERROR,
  ST_NOT_SUPPORTED,
  ST_NOT_IMPLEMENTED,
  ST_DOES_NOT_EXIST,
  ST_BUSY,
  ST_HEX
};

struct port_stats {
  uint64_t goodOctetsRcv;
  uint64_t badOctetsRcv;
  uint64_t macTransmitErr;
  uint64_t goodPktsRcv;
  uint64_t badPktsRcv;
  uint64_t brdcPktsRcv;
  uint64_t mcPktsRcv;
  uint64_t pkts64Octets;
  uint64_t pkts65to127Octets;
  uint64_t pkts128to255Octets;
  uint64_t pkts256to511Octets;
  uint64_t pkts512to1023Octets;
  uint64_t pkts1024tomaxOoctets;
  uint64_t goodOctetsSent;
  uint64_t goodPktsSent;
  uint64_t excessiveCollisions;
  uint64_t mcPktsSent;
  uint64_t brdcPktsSent;
  uint64_t unrecogMacCntrRcv;
  uint64_t fcSent;
  uint64_t goodFcRcv;
  uint64_t dropEvents;
  uint64_t undersizePkts;
  uint64_t fragmentsPkts;
  uint64_t oversizePkts;
  uint64_t jabberPkts;
  uint64_t macRcvError;
  uint64_t badCrc;
  uint64_t collisions;
  uint64_t lateCollisions;
  uint64_t badFcRcv;
  uint64_t ucPktsRcv;
  uint64_t ucPktsSent;
  uint64_t multiplePktsSent;
  uint64_t deferredPktsSent;
};

typedef uint8_t queue_id_t;
typedef uint8_t dscp_t;

struct dscp_map {
  dscp_t dscp;
  queue_id_t queue;
};
